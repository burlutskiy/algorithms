package sort;

import java.util.Arrays;

import org.junit.Assert;

public class SortTestUtil {

	static void estimate(Class<? extends AbstractSort> clazz, int minPow, int maxPow, IntArrayGenerator generator) {
		System.out.println(generator.getDescription() +":");
		double cm[], ex[], tm[];
		cm = new double[maxPow - minPow];
		ex = new double[maxPow - minPow];
		tm = new double[maxPow - minPow];
		for (int i = minPow; i < maxPow; i++) {
			int[] a = generator.getArray(i);
			AbstractSort sort;
			try {
				sort = newInstance(clazz, a);
				sort.printStats();
				cm[i - minPow] = sort.getComparisonCount();
				ex[i - minPow] = sort.getExchangesCount();
				tm[i - minPow] = sort.getTime();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		double mcm, mex, mtm;
		mcm = mex = mtm = 0;
		for (int i = 2; i < maxPow - minPow; i++) {
//			System.out.println(String.format("%.2f, %.2f, %.2f", log2(cm[i] / cm[i - 1]), log2(ex[i] / ex[i - 1]), log2(tm[i] / tm[i - 1])));
			mcm+=log2(cm[i] / cm[i - 1]); 
			mex+=log2(ex[i] / ex[i - 1]);
			mtm+=log2(tm[i] / tm[i - 1]);
		}
		mcm/= maxPow - minPow - 2.;
		mex/= maxPow - minPow - 2.;
		mtm/= maxPow - minPow - 2.;
		System.out.println(String.format("N^%.2f, N^%.2f, N^%.2f", mcm, mex, mtm));
	}

	static AbstractSort newInstance(Class<? extends AbstractSort> clazz, int[] a){
		try {
			return clazz.getDeclaredConstructor(int[].class).newInstance(a);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	static double mean(double[] m) {
	    double sum = 0;
	    for (int i = 0; i < m.length; i++) {
	        sum += m[i];
	    }
	    return sum / m.length;
	}

	public static double log2(double n) {
		return Math.log(n) / Math.log(2);
	}
	
	static void test(Class<? extends AbstractSort> clazz) {
		for (int[] array : arrays) {
			int[] a = array.clone();
			AbstractSort sort = newInstance(clazz, a);
			testSort(sort.sortedArray(), sort);
		}
	}

	static void testSort(int[] a, AbstractSort sort) {
		for (int i = 1; i < a.length; i++) {
			if (a[i] < a[i - 1]) {
				Assert.fail(
						Arrays.toString(a) + " wasn't sorted by sort method:" + sort.getClass().getSimpleName());
			}
		}
	}

	private static final int[][] arrays = { { 0 }, { 0, 0, 0 }, { 5, 4, 3, 2, 1 }, { 1, 2, 3, 4, 5 }, 
			{ 9, 9, 9, 9, 9, 2, 3, 3, 2, 1, 8, 4, 2, 6, 5, 9, 1, 3, 4, 7, 1, 2, 3, 3, 2, 1 },
			{ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, { 9, 8, 7, 6, 5, 4, 3, 2, 1 },
			{ 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9 },
			{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1 },
			{ 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 },
			{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }, { 1, 2 }, { 2, 1 }, { 1, 2, 3 }, { 3, 2, 1 },
			{ 13, 49, 77, 71, 75, 34, 78, 87, 28, 15, 32, 54, 86, 77, 99, 74, 59, 23, 78, 23, 50, 11, 22, 37, 52, 7, 80,
					44, 51, 51, 46, 28, 17, 78, 51, 12, 84, 89, 55, 7, 41, 77, 32, 5, 43, 64, 30, 44, 46, 34, 66, 22,
					22, 58, 22, 64, 18, 24, 9, 41, 89, 63, 34, 66, 29, 91, 78, 98, 23, 17, 76, 57, 62, 48, 1, 99, 43,
					33, 10, 46, 39, 59, 70, 41, 65, 72, 84, 27, 55, 28, 85, 8, 8, 66, 14, 73, 59, 86, 71, 43, 3, 55, 52,
					82, 32, 62, 73, 23, 46, 8, 50, 99, 24, 0, 84, 1, 39, 57, 32, 59, 54, 59, 17, 92, 63, 38, 64, 21, 0,
					17, 12, 30, 4, 5, 56, 70, 57, 9, 51, 51, 95, 70, 79, 0, 30, 71, 22, 88, 29, 22, 97, 75, 14, 51, 38,
					13, 95, 55, 89, 87, 20, 33, 23, 71, 79, 53, 68, 68, 90, 82, 52, 10, 42, 2, 52, 40, 77, 21, 43, 31,
					98, 10, 92, 56, 41, 2, 55, 83, 59, 35, 80, 55, 31, 2, 15, 62, 27, 74, 75, 53, 98, 24, 34, 12, 84,
					40, 15, 16, 93, 18, 7, 7, 26, 78, 36, 34, 33, 49, 12, 98, 68, 52, 66, 36, 13, 44, 44, 26, 89, 89,
					98, 24, 87, 81, 70, 13, 48, 40, 82, 44, 30, 25, 50, 50, 54, 0, 35, 40, 35, 0, 5, 70, 49, 5, 63, 87,
					58, 78, 91, 57, 40, 9, 44, 14, 96, 87, 93, 29, 15, 71, 33, 58, 68, 3, 4, 37, 49, 10, 18, 94, 12, 43,
					66, 39, 50, 50, 71, 51, 70, 61, 86, 74, 45, 98, 39, 66, 17, 27, 94, 92, 76, 32, 14, 81, 35, 4, 30,
					45, 20, 23, 20, 9, 2, 1, 35, 73, 36, 20, 33, 1, 41, 65, 87, 93, 3, 60, 49, 80, 37, 73, 5, 58, 7, 75,
					50, 67, 70, 24, 31, 76, 34, 60, 3, 97, 98, 15, 17, 44, 34, 22, 25, 4, 70, 46, 72, 78, 62, 36, 22,
					22, 90, 88, 54, 96, 65, 13, 28, 20, 43, 19, 90, 32, 12, 20, 16, 37, 35, 29, 75, 92, 88, 48, 65, 85,
					19, 72, 91, 29, 75, 41, 75, 6, 38, 70, 37, 44, 25, 97, 78, 86, 68, 16, 53, 39, 21, 31, 67, 25, 27,
					43, 1, 18, 91, 7, 95, 11, 66, 74, 11, 62, 69, 7, 88, 36, 10, 5, 15, 91, 0, 39, 85, 58, 75, 1, 11,
					71, 53, 5, 3, 66, 5, 24, 27, 60, 35, 49, 4, 79, 76, 61, 24, 77, 64, 14, 57, 29, 82, 62, 66, 17, 97,
					95, 89, 30, 18, 76, 37, 86, 13, 87, 84, 84, 88, 90, 65, 11, 42, 57, 91, 28, 90, 61, 87, 63, 49, 71,
					1, 36, 98, 92, 96, 66, 5, 94, 73, 46, 62, 73, 81, 50, 16, 88, 92, 58, 34, 87, 83, 63, 14, 76, 1, 91,
					18, 22, 54, 50, 0, 97, 73, 54, 90, 81, 20, 35, 78, 67, 38, 41, 43, 30, 1, 74, 15, 56, 29, 61, 9, 4,
					66, 25, 55, 4, 82, 32, 53, 39, 95, 91, 75, 48, 32, 27, 38, 43, 66, 82, 91, 94, 11, 48, 41, 45, 23,
					41, 29, 23, 88, 0, 19, 84, 8, 91, 4, 95, 9, 22, 55, 5, 17, 46, 41, 37, 67, 42, 34, 23, 6, 56, 41,
					48, 1, 78, 4, 83, 77, 53, 10, 2, 20, 52, 34, 45, 35, 82, 25, 80, 67, 93, 75, 8, 0, 83, 71, 3, 70,
					75, 77, 1, 41, 2, 26, 28, 72, 36, 24, 92, 2, 57, 51, 96, 90, 32, 91, 29, 74, 27, 83, 12, 48, 98, 71,
					28, 12, 95, 31, 86, 80, 11, 29, 29, 89, 18, 18, 66, 76, 89, 8, 16, 47, 41, 79, 17, 46, 29, 82, 53,
					93, 8, 9, 5, 83, 25, 66, 76, 13, 80, 85, 78, 18, 26, 97, 94, 4, 17, 8, 30, 4, 78, 10, 78, 74, 21,
					59, 18, 44, 34, 59, 69, 29, 67, 92, 70, 61, 85, 27, 30, 4, 91, 87, 0, 36, 51, 80, 9, 49, 24, 8, 73,
					89, 94, 48, 4, 72, 92, 6, 70, 55, 92, 6, 96, 44, 22, 31, 83, 37, 95, 16, 0, 11, 41, 8, 95, 22, 75,
					91, 22, 72, 9, 7, 98, 82, 18, 92, 72, 10, 60, 40, 21, 39, 27, 95, 19, 92, 87, 26, 53, 13, 38, 91, 7,
					72, 24, 21, 43, 3, 1, 42, 57, 69, 98, 0, 61, 76, 18, 36, 42, 7, 0, 14, 47, 34, 17, 73, 79, 71, 96,
					78, 19, 87, 31, 69, 95, 90, 13, 88, 65, 7, 89, 58, 73, 44, 90, 15, 46, 11, 21, 85, 80, 39, 48, 7,
					25, 6, 29, 42, 45, 11, 91, 14, 1, 83, 37, 78, 35, 49, 1, 61, 60, 96, 93, 97, 12, 26, 0, 9, 78, 18,
					3, 71, 88, 62, 52, 48, 2, 84, 37, 4, 48, 99, 22, 47, 83, 58, 17, 83, 36, 61, 70, 19, 68, 24, 74, 3,
					92, 6, 86, 13, 92, 94, 29, 58, 47, 32, 72, 72, 78, 91, 34, 49, 15, 79, 99, 88, 94, 68, 18, 62, 30,
					3, 78, 38, 1, 79, 47, 78, 73, 7, 10, 64, 13, 83, 71, 50, 13, 78, 88, 39, 18, 20, 55, 71, 81, 12, 45,
					53, 13, 89, 33, 15, 21, 37, 47, 70, 40, 11, 14, 9, 53, 27, 70, 1, 35, 12, 48, 91, 14, 75, 48, 22,
					33, 7, 96, 27, 47, 12, 19, 79, 40, 64, 77, 24, 61, 89, 75, 89, 72, 34, 43, 36, 11, 73, 57, 25, 44,
					50, 1, 45, 18, 22, 84, 8, 67, 27, 2, 13, 73, 97, 55, 13, 92, 82, 11, 24, 81, 46, 57, 16, 25, 60,
					99 } };

}
